Index: app/src/main/res/layout/activity_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\">\n\n    <androidx.appcompat.widget.Toolbar\n        android:id=\"@+id/toolbar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"?attr/actionBarSize\"\n        android:minHeight=\"?attr/actionBarSize\"\n        android:background=\"?attr/colorPrimary\"\n        android:theme=\"@style/ThemeOverlay.AppCompat.ActionBar\"\n        app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"/>\n\n    <androidx.fragment.app.FragmentContainerView\n        android:id=\"@+id/nav_host_fragment\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:name=\"androidx.navigation.fragment.NavHostFragment\"\n        app:defaultNavHost=\"true\"\n        android:layout_marginTop=\"?android:attr/actionBarSize\"\n        android:layout_marginBottom=\"?android:attr/actionBarSize\"\n        app:layout_constraintBottom_toTopOf=\"@id/nav_view\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@id/toolbar\"/>\n\n\n    <com.google.android.material.bottomnavigation.BottomNavigationView\n        android:id=\"@+id/nav_view\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:background=\"?android:attr/windowBackground\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:menu=\"@menu/bottom_nav_menu\"/>\n</androidx.constraintlayout.widget.ConstraintLayout>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_main.xml b/app/src/main/res/layout/activity_main.xml
--- a/app/src/main/res/layout/activity_main.xml	(revision 60eb7cd8846501fea94ad6a8ba2a6becaa848857)
+++ b/app/src/main/res/layout/activity_main.xml	(date 1636306591935)
@@ -41,4 +41,12 @@
         app:layout_constraintLeft_toLeftOf="parent"
         app:layout_constraintRight_toRightOf="parent"
         app:menu="@menu/bottom_nav_menu"/>
+
+    <SearchView
+        android:layout_width="50dp"
+        android:layout_height="24dp"
+        android:layout_marginTop="16dp"
+        android:layout_marginEnd="8dp"
+        app:layout_constraintEnd_toEndOf="@+id/toolbar"
+        app:layout_constraintTop_toTopOf="parent" />
 </androidx.constraintlayout.widget.ConstraintLayout>
Index: amplify/backend/api/restaurants/stacks/CustomResources.json
===================================================================
diff --git a/amplify/backend/api/restaurants/stacks/CustomResources.json b/amplify/backend/api/restaurants/stacks/CustomResources.json
deleted file mode 100644
--- a/amplify/backend/api/restaurants/stacks/CustomResources.json	(revision 60eb7cd8846501fea94ad6a8ba2a6becaa848857)
+++ /dev/null	(revision 60eb7cd8846501fea94ad6a8ba2a6becaa848857)
@@ -1,58 +0,0 @@
-{
-  "AWSTemplateFormatVersion": "2010-09-09",
-  "Description": "An auto-generated nested stack.",
-  "Metadata": {},
-  "Parameters": {
-    "AppSyncApiId": {
-      "Type": "String",
-      "Description": "The id of the AppSync API associated with this project."
-    },
-    "AppSyncApiName": {
-      "Type": "String",
-      "Description": "The name of the AppSync API",
-      "Default": "AppSyncSimpleTransform"
-    },
-    "env": {
-      "Type": "String",
-      "Description": "The environment name. e.g. Dev, Test, or Production",
-      "Default": "NONE"
-    },
-    "S3DeploymentBucket": {
-      "Type": "String",
-      "Description": "The S3 bucket containing all deployment assets for the project."
-    },
-    "S3DeploymentRootKey": {
-      "Type": "String",
-      "Description": "An S3 key relative to the S3DeploymentBucket that points to the root\nof the deployment directory."
-    }
-  },
-  "Resources": {
-    "EmptyResource": {
-      "Type": "Custom::EmptyResource",
-      "Condition": "AlwaysFalse"
-    }
-  },
-  "Conditions": {
-    "HasEnvironmentParameter": {
-      "Fn::Not": [
-        {
-          "Fn::Equals": [
-            {
-              "Ref": "env"
-            },
-            "NONE"
-          ]
-        }
-      ]
-    },
-    "AlwaysFalse": {
-      "Fn::Equals": ["true", "false"]
-    }
-  },
-  "Outputs": {
-    "EmptyOutput": {
-      "Description": "An empty output. You may delete this if you have at least one resource above.",
-      "Value": ""
-    }
-  }
-}
Index: amplify/backend/backend-config.json
===================================================================
diff --git a/amplify/backend/backend-config.json b/amplify/backend/backend-config.json
deleted file mode 100644
--- a/amplify/backend/backend-config.json	(revision 60eb7cd8846501fea94ad6a8ba2a6becaa848857)
+++ /dev/null	(revision 60eb7cd8846501fea94ad6a8ba2a6becaa848857)
@@ -1,64 +0,0 @@
-{
-  "auth": {
-    "needtofeedae53688e": {
-      "service": "Cognito",
-      "providerPlugin": "awscloudformation",
-      "dependsOn": [],
-      "customAuth": false,
-      "frontendAuthConfig": {
-        "loginMechanisms": [
-          "EMAIL"
-        ],
-        "signupAttributes": [
-          "EMAIL",
-          "NAME"
-        ],
-        "passwordProtectionSettings": {
-          "passwordPolicyMinLength": 8,
-          "passwordPolicyCharacters": []
-        },
-        "mfaConfiguration": "OFF",
-        "mfaTypes": [
-          "SMS"
-        ],
-        "verificationMechanisms": [
-          "EMAIL"
-        ]
-      }
-    }
-  },
-  "storage": {
-    "s3475e3a0f": {
-      "service": "S3",
-      "providerPlugin": "awscloudformation"
-    }
-  },
-  "api": {
-    "restaurants": {
-      "service": "AppSync",
-      "providerPlugin": "awscloudformation",
-      "output": {
-        "authConfig": {
-          "defaultAuthentication": {
-            "authenticationType": "API_KEY",
-            "apiKeyConfig": {
-              "apiKeyExpirationDays": 30,
-              "description": "api key description"
-            }
-          },
-          "additionalAuthenticationProviders": [
-            {
-              "authenticationType": "AWS_IAM"
-            },
-            {
-              "authenticationType": "AMAZON_COGNITO_USER_POOLS",
-              "userPoolConfig": {
-                "userPoolId": "authneedtofeedae53688e"
-              }
-            }
-          ]
-        }
-      }
-    }
-  }
-}
\ No newline at end of file
Index: amplify/backend/storage/s3475e3a0f/storage-params.json
===================================================================
diff --git a/amplify/backend/storage/s3475e3a0f/storage-params.json b/amplify/backend/storage/s3475e3a0f/storage-params.json
deleted file mode 100644
--- a/amplify/backend/storage/s3475e3a0f/storage-params.json	(revision 60eb7cd8846501fea94ad6a8ba2a6becaa848857)
+++ /dev/null	(revision 60eb7cd8846501fea94ad6a8ba2a6becaa848857)
@@ -1,1 +0,0 @@
-{}
\ No newline at end of file
Index: amplify/backend/auth/needtofeedae53688e/needtofeedae53688e-cloudformation-template.yml
===================================================================
diff --git a/amplify/backend/auth/needtofeedae53688e/needtofeedae53688e-cloudformation-template.yml b/amplify/backend/auth/needtofeedae53688e/needtofeedae53688e-cloudformation-template.yml
deleted file mode 100644
--- a/amplify/backend/auth/needtofeedae53688e/needtofeedae53688e-cloudformation-template.yml	(revision 60eb7cd8846501fea94ad6a8ba2a6becaa848857)
+++ /dev/null	(revision 60eb7cd8846501fea94ad6a8ba2a6becaa848857)
@@ -1,854 +0,0 @@
-
-AWSTemplateFormatVersion: 2010-09-09
-
-Parameters:
-  env:
-    Type: String
-  authRoleArn:
-    Type: String
-  unauthRoleArn:
-    Type: String
-
-  
-
-    
-  identityPoolName:
-    Type: String
-  
-            
-  
-  allowUnauthenticatedIdentities:
-    Type: String
-            
-  resourceNameTruncated:
-    Type: String
-  
-            
-  userPoolName:
-    Type: String
-  
-            
-        
-  autoVerifiedAttributes:
-    Type: CommaDelimitedList
-      
-  mfaConfiguration:
-    Type: String
-  
-            
-        
-  mfaTypes:
-    Type: CommaDelimitedList
-      
-  smsAuthenticationMessage:
-    Type: String
-  
-            
-  smsVerificationMessage:
-    Type: String
-  
-            
-  emailVerificationSubject:
-    Type: String
-  
-            
-  emailVerificationMessage:
-    Type: String
-  
-            
-  
-  defaultPasswordPolicy:
-    Type: String
-            
-    
-  passwordPolicyMinLength:
-    Type: Number
-          
-        
-  passwordPolicyCharacters:
-    Type: CommaDelimitedList
-      
-        
-  requiredAttributes:
-    Type: CommaDelimitedList
-      
-        
-  aliasAttributes:
-    Type: CommaDelimitedList
-      
-  
-  userpoolClientGenerateSecret:
-    Type: String
-            
-    
-  userpoolClientRefreshTokenValidity:
-    Type: Number
-          
-        
-  userpoolClientWriteAttributes:
-    Type: CommaDelimitedList
-      
-        
-  userpoolClientReadAttributes:
-    Type: CommaDelimitedList
-      
-  userpoolClientLambdaRole:
-    Type: String
-  
-            
-  
-  userpoolClientSetAttributes:
-    Type: String
-            
-  sharedId:
-    Type: String
-  
-            
-  resourceName:
-    Type: String
-  
-            
-  authSelections:
-    Type: String
-  
-            
-            
-            
-  useDefault:
-    Type: String
-  
-            
-  
-  hostedUI:
-    Type: String
-            
-        
-  usernameAttributes:
-    Type: CommaDelimitedList
-      
-  triggers:
-    Type: String
-  
-            
-  hostedUIDomainName:
-    Type: String
-  
-            
-        
-  authProvidersUserPool:
-    Type: CommaDelimitedList
-      
-  hostedUIProviderMeta:
-    Type: String
-  
-            
-  hostedUIProviderCreds:
-    Type: String
-  
-            
-  oAuthMetadata:
-    Type: String
-  
-            
-        
-  userPoolGroupList:
-    Type: CommaDelimitedList
-      
-            
-  serviceName:
-    Type: String
-  
-            
-  
-  usernameCaseSensitive:
-    Type: String
-            
-      
-  parentStack:
-    Type: String
-        
-  
-  breakCircularDependency:
-    Type: String
-            
-        
-  permissions:
-    Type: CommaDelimitedList
-      
-        
-  dependsOn:
-    Type: CommaDelimitedList
-      
-Conditions:
-  ShouldNotCreateEnvResources: !Equals [ !Ref env, NONE ]
-  
-  ShouldOutputAppClientSecrets: !Equals [!Ref userpoolClientGenerateSecret, true ]
-  
-
-Resources:
-  
-  
-  # BEGIN SNS ROLE RESOURCE
-  SNSRole:
-  # Created to allow the UserPool SMS Config to publish via the Simple Notification Service during MFA Process
-    Type: AWS::IAM::Role
-    Properties:
-      RoleName: !If [ShouldNotCreateEnvResources, 'needtoae53688e_sns-role', !Join ['',[ 'sns', 'ae53688e', !Select [3, !Split ['-', !Ref 'AWS::StackName']], '-', !Ref env]]]
-      AssumeRolePolicyDocument:
-        Version: "2012-10-17"
-        Statement:
-          - Sid: ""
-            Effect: "Allow"
-            Principal:
-              Service: "cognito-idp.amazonaws.com"
-            Action:
-              - "sts:AssumeRole"
-            Condition:
-              StringEquals:
-                sts:ExternalId: needtoae53688e_role_external_id
-      Policies:
-        -
-          PolicyName: needtoae53688e-sns-policy
-          PolicyDocument:
-            Version: "2012-10-17"
-            Statement:
-              -
-                Effect: "Allow"
-                Action:
-                  - "sns:Publish"
-                Resource: "*"
-  # BEGIN USER POOL RESOURCES
-  UserPool:
-  # Created upon user selection
-  # Depends on SNS Role for Arn if MFA is enabled
-    Type: AWS::Cognito::UserPool
-    UpdateReplacePolicy: Retain
-    Properties:
-      UserPoolName: !If [ShouldNotCreateEnvResources, !Ref userPoolName, !Join ['',[!Ref userPoolName, '-', !Ref env]]]
-      
-      
-      UsernameConfiguration:
-        CaseSensitive: false
-      
-      Schema:
-        
-        -
-          Name: email
-          Required: true
-          Mutable: true
-        
-        -
-          Name: name
-          Required: true
-          Mutable: true
-        
-      
-      
-      
-      AutoVerifiedAttributes:
-      
-        - email
-      
-      
-      
-      EmailVerificationMessage: !Ref emailVerificationMessage
-      EmailVerificationSubject: !Ref emailVerificationSubject
-      
-      Policies:
-        PasswordPolicy:
-          MinimumLength: !Ref passwordPolicyMinLength
-          RequireLowercase: false
-          RequireNumbers: false
-          RequireSymbols: false
-          RequireUppercase: false
-      
-      UsernameAttributes: !Ref usernameAttributes
-      
-      
-      MfaConfiguration: !Ref mfaConfiguration
-      SmsVerificationMessage: !Ref smsVerificationMessage
-      SmsAuthenticationMessage: !Ref smsAuthenticationMessage
-      SmsConfiguration:
-        SnsCallerArn: !GetAtt SNSRole.Arn
-        ExternalId: needtoae53688e_role_external_id
-    
-  
-  UserPoolClientWeb:
-  # Created provide application access to user pool
-  # Depends on UserPool for ID reference
-    Type: "AWS::Cognito::UserPoolClient"
-    Properties:
-      ClientName: needtoae53688e_app_clientWeb
-      
-      RefreshTokenValidity: !Ref userpoolClientRefreshTokenValidity
-      UserPoolId: !Ref UserPool
-    DependsOn: UserPool
-  UserPoolClient:
-  # Created provide application access to user pool
-  # Depends on UserPool for ID reference
-    Type: "AWS::Cognito::UserPoolClient"
-    Properties:
-      ClientName: needtoae53688e_app_client
-      
-      GenerateSecret: !Ref userpoolClientGenerateSecret
-      RefreshTokenValidity: !Ref userpoolClientRefreshTokenValidity
-      UserPoolId: !Ref UserPool
-    DependsOn: UserPool
-  # BEGIN USER POOL LAMBDA RESOURCES
-  UserPoolClientRole:
-  # Created to execute Lambda which gets userpool app client config values
-    Type: 'AWS::IAM::Role'
-    Properties:
-      RoleName: !If [ShouldNotCreateEnvResources, !Ref userpoolClientLambdaRole, !Join ['',['upClientLambdaRole', 'ae53688e', !Select [3, !Split ['-', !Ref 'AWS::StackName']], '-', !Ref env]]]
-      AssumeRolePolicyDocument:
-        Version: '2012-10-17'
-        Statement:
-          - Effect: Allow
-            Principal:
-              Service:
-                - lambda.amazonaws.com
-            Action:
-              - 'sts:AssumeRole'
-    DependsOn: UserPoolClient
-  UserPoolClientLambda:
-  # Lambda which gets userpool app client config values
-  # Depends on UserPool for id
-  # Depends on UserPoolClientRole for role ARN
-    Type: 'AWS::Lambda::Function'
-    Properties:
-      Code:
-        ZipFile: !Join
-          - |+
-          - - 'const response = require(''cfn-response'');'
-            - 'const aws = require(''aws-sdk'');'
-            - 'const identity = new aws.CognitoIdentityServiceProvider();'
-            - 'exports.handler = (event, context, callback) => {'
-            - ' if (event.RequestType == ''Delete'') { '
-            - '   response.send(event, context, response.SUCCESS, {})'
-            - ' }'
-            - ' if (event.RequestType == ''Update'' || event.RequestType == ''Create'') {'
-            - '   const params = {'
-            - '     ClientId: event.ResourceProperties.clientId,'
-            - '     UserPoolId: event.ResourceProperties.userpoolId'
-            - '   };'
-            - '   identity.describeUserPoolClient(params).promise()'
-            - '     .then((res) => {'
-            - '       response.send(event, context, response.SUCCESS, {''appSecret'': res.UserPoolClient.ClientSecret});'
-            - '     })'
-            - '     .catch((err) => {'
-            - '       response.send(event, context, response.FAILED, {err});'
-            - '     });'
-            - ' }'
-            - '};'
-      Handler: index.handler
-      Runtime: nodejs12.x
-      Timeout: 300
-      Role: !GetAtt
-        - UserPoolClientRole
-        - Arn
-    DependsOn: UserPoolClientRole
-  UserPoolClientLambdaPolicy:
-  # Sets userpool policy for the role that executes the Userpool Client Lambda
-  # Depends on UserPool for Arn
-  # Marked as depending on UserPoolClientRole for easier to understand CFN sequencing
-    Type: 'AWS::IAM::Policy'
-    Properties:
-      PolicyName: needtoae53688e_userpoolclient_lambda_iam_policy
-      Roles:
-        - !Ref UserPoolClientRole
-      PolicyDocument:
-        Version: '2012-10-17'
-        Statement:
-          - Effect: Allow
-            Action:
-              - 'cognito-idp:DescribeUserPoolClient'
-            Resource: !GetAtt UserPool.Arn
-    DependsOn: UserPoolClientLambda
-  UserPoolClientLogPolicy:
-  # Sets log policy for the role that executes the Userpool Client Lambda
-  # Depends on UserPool for Arn
-  # Marked as depending on UserPoolClientLambdaPolicy for easier to understand CFN sequencing
-    Type: 'AWS::IAM::Policy'
-    Properties:
-      PolicyName: needtoae53688e_userpoolclient_lambda_log_policy
-      Roles:
-        - !Ref UserPoolClientRole
-      PolicyDocument:
-        Version: 2012-10-17
-        Statement:
-          - Effect: Allow
-            Action:
-              - 'logs:CreateLogGroup'
-              - 'logs:CreateLogStream'
-              - 'logs:PutLogEvents'
-            Resource: !Sub
-              - arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
-              - { region: !Ref "AWS::Region",  account: !Ref "AWS::AccountId", lambda: !Ref UserPoolClientLambda}
-    DependsOn: UserPoolClientLambdaPolicy
-  UserPoolClientInputs:
-  # Values passed to Userpool client Lambda
-  # Depends on UserPool for Id
-  # Depends on UserPoolClient for Id
-  # Marked as depending on UserPoolClientLambdaPolicy for easier to understand CFN sequencing
-    Type: 'Custom::LambdaCallout'
-    Properties:
-      ServiceToken: !GetAtt UserPoolClientLambda.Arn
-      clientId: !Ref UserPoolClient
-      userpoolId: !Ref UserPool
-    DependsOn: UserPoolClientLogPolicy
-  
-  HostedUICustomResource:
-    Type: 'AWS::Lambda::Function'
-    Properties:
-      Code:
-        ZipFile: !Join
-          - |+
-          - - 'const response = require(''cfn-response'');'
-            - 'const aws = require(''aws-sdk'');'
-            - 'const identity = new aws.CognitoIdentityServiceProvider();'
-            - 'exports.handler = (event, context, callback) => {'
-            - ' const userPoolId = event.ResourceProperties.userPoolId;'
-            - ' const inputDomainName = event.ResourceProperties.hostedUIDomainName;'
-            - ' let deleteUserPoolDomain = (domainName) => {'
-            - '   let params = { Domain: domainName, UserPoolId: userPoolId };'
-            - '   return identity.deleteUserPoolDomain(params).promise();'
-            - ' };'
-            - ' if (event.RequestType == ''Delete'') {'
-            - '   deleteUserPoolDomain(inputDomainName)'
-            - '   .then(() => {response.send(event, context, response.SUCCESS, {})})'
-            - '   .catch((err) => { console.log(err); response.send(event, context, response.FAILED, {err}) });'
-            - ' }'
-            - ' if (event.RequestType == ''Update'' || event.RequestType == ''Create'') {'
-            - '  let checkDomainAvailability = (domainName) => {'
-            - '  let params = { Domain: domainName };'
-            - '  return identity.describeUserPoolDomain(params).promise().then((res) => {'
-            - '   if (res.DomainDescription && res.DomainDescription.UserPool) {'
-            - '    return false;'
-            - '   }'
-            - '   return true;'
-            - '   }).catch((err) => { return false; });'
-            - ' };'
-            - ' let createUserPoolDomain = (domainName) => {'
-            - '  let params = { Domain: domainName, UserPoolId: userPoolId };'
-            - '   return identity.createUserPoolDomain(params).promise();'
-            - ' };'
-            - ' identity.describeUserPool({UserPoolId: userPoolId }).promise().then((result) => {'
-            - '  if (inputDomainName) {'
-            - '   if (result.UserPool.Domain === inputDomainName) {'
-            - '    return;'
-            - '    } else {'
-            - '       if (!result.UserPool.Domain) {'
-            - '         return checkDomainAvailability(inputDomainName).then((isDomainAvailable) => {'
-            - '           if (isDomainAvailable) {'
-            - '             return createUserPoolDomain(inputDomainName);'
-            - '           } else {'
-            - '               throw new Error(''Domain not available'');'
-            - '           }'
-            - '         });'
-            - '       } else {'
-            - '           return checkDomainAvailability(inputDomainName).then((isDomainAvailable) => {'
-            - '             if (isDomainAvailable) {'
-            - '               return deleteUserPoolDomain(result.UserPool.Domain).then(() => createUserPoolDomain(inputDomainName));'
-            - '             } else {'
-            - '                 throw new Error(''Domain not available'');'
-            - '             }'
-            - '           });'
-            - '       }'
-            - '     }'
-            - '   } else {'
-            - '       if (result.UserPool.Domain) {'
-            - '         return deleteUserPoolDomain(result.UserPool.Domain);'
-            - '       }'
-            - '   }'
-            - ' }).then(() => {response.send(event, context, response.SUCCESS, {})}).catch((err) => {'
-            - ' console.log(err);  response.send(event, context, response.FAILED, {err});'
-            - ' });'
-            - '}}'
-
-
-      Handler: index.handler
-      Runtime: nodejs12.x
-      Timeout: 300
-      Role: !GetAtt
-        - UserPoolClientRole
-        - Arn
-    DependsOn: UserPoolClientRole
-
-  HostedUICustomResourcePolicy:
-    Type: 'AWS::IAM::Policy'
-    Properties:
-      PolicyName: !Join ['-',[!Ref UserPool, 'hostedUI']]
-      Roles:
-        - !Ref UserPoolClientRole
-      PolicyDocument:
-        Version: '2012-10-17'
-        Statement:
-          - Effect: Allow
-            Action:
-              - 'cognito-idp:CreateUserPoolDomain'
-              - 'cognito-idp:DescribeUserPool'
-              - 'cognito-idp:DeleteUserPoolDomain'
-            Resource: !GetAtt UserPool.Arn
-          - Effect: Allow
-            Action:
-              - 'cognito-idp:DescribeUserPoolDomain'
-            Resource: '*'
-    DependsOn: HostedUICustomResource
-  HostedUICustomResourceLogPolicy:
-    Type: 'AWS::IAM::Policy'
-    Properties:
-      PolicyName: !Join ['-',[!Ref UserPool, 'hostedUILogPolicy']]
-      Roles:
-        - !Ref UserPoolClientRole
-      PolicyDocument:
-        Version: 2012-10-17
-        Statement:
-          - Effect: Allow
-            Action:
-              - 'logs:CreateLogGroup'
-              - 'logs:CreateLogStream'
-              - 'logs:PutLogEvents'
-            Resource: !Sub
-              - arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
-              - { region: !Ref "AWS::Region",  account: !Ref "AWS::AccountId", lambda: !Ref HostedUICustomResource}
-    DependsOn: HostedUICustomResourcePolicy
-  HostedUICustomResourceInputs:
-    Type: 'Custom::LambdaCallout'
-    Properties:
-      ServiceToken: !GetAtt HostedUICustomResource.Arn
-      userPoolId: !Ref UserPool
-      hostedUIDomainName: !If [ShouldNotCreateEnvResources, !Ref hostedUIDomainName, !Join ['-',[!Ref hostedUIDomainName, !Ref env]]]
-    DependsOn: HostedUICustomResourceLogPolicy
-  
-
-  
-  HostedUIProvidersCustomResource:
-    Type: 'AWS::Lambda::Function'
-    Properties:
-      Code:
-        ZipFile: !Join
-          - |+
-          - - 'const response = require(''cfn-response'');'
-            - 'const aws = require(''aws-sdk'');'
-            - 'const identity = new aws.CognitoIdentityServiceProvider();'
-            - 'exports.handler = (event, context, callback) => {'
-            - 'try{'
-            - ' const userPoolId = event.ResourceProperties.userPoolId;'
-            - ' let hostedUIProviderMeta = JSON.parse(event.ResourceProperties.hostedUIProviderMeta);'
-            - ' let hostedUIProviderCreds = JSON.parse(event.ResourceProperties.hostedUIProviderCreds);'
-            - ' if(hostedUIProviderCreds.length === 0) {'
-            - '  response.send(event, context, response.SUCCESS, {});'
-            - ' }'
-            - ' if (event.RequestType == ''Delete'') {'
-            - '  response.send(event, context, response.SUCCESS, {});'
-            - ' }'
-            - ' if (event.RequestType == ''Update'' || event.RequestType == ''Create'') {'
-            - '  let getRequestParams = (providerName) => {'
-            - '   let providerMetaIndex = hostedUIProviderMeta.findIndex((provider) => provider.ProviderName === providerName);'
-            - '   let providerMeta =  hostedUIProviderMeta[providerMetaIndex];'
-            - '   let providerCredsIndex = hostedUIProviderCreds.findIndex((provider) => provider.ProviderName === providerName);'
-            - '   let providerCreds = hostedUIProviderCreds[providerCredsIndex];'
-            - '   let requestParams = {'
-            - '    ProviderName: providerMeta.ProviderName,'
-            - '    UserPoolId: userPoolId,'
-            - '    AttributeMapping: providerMeta.AttributeMapping,'
-            - '   };'
-            - '   if (providerMeta.ProviderName === ''SignInWithApple'') {'
-            - '     if (providerCreds.client_id && providerCreds.team_id && providerCreds.key_id && providerCreds.private_key) {'
-            - '      requestParams.ProviderDetails = {'
-            - '       ''client_id'': providerCreds.client_id,'
-            - '       ''team_id'': providerCreds.team_id,'
-            - '       ''key_id'': providerCreds.key_id,'
-            - '       ''private_key'': providerCreds.private_key,'
-            - '       ''authorize_scopes'': providerMeta.authorize_scopes,'
-            - '      };'
-            - '     } else {'
-            - '       requestParams = null;'
-            - '     }'
-            - '   } else {'
-            - '    requestParams.ProviderDetails = {'
-            - '     ''client_id'': providerCreds.client_id,'
-            - '     ''client_secret'': providerCreds.client_secret,'
-            - '     ''authorize_scopes'': providerMeta.authorize_scopes,'
-            - '    };'
-            - '   }'
-            - '   return requestParams;'
-            - '  };'
-            - '  let createIdentityProvider = (providerName) => {'
-            - '   let requestParams = getRequestParams(providerName);'
-            - '   if (!requestParams) {'
-            - '     return Promise.resolve();'
-            - '   }'
-            - '   requestParams.ProviderType = requestParams.ProviderName;'
-            - '   return identity.createIdentityProvider(requestParams).promise();'
-            - '  };'
-            - '  let updateIdentityProvider = (providerName) => {'
-            - '   let requestParams = getRequestParams(providerName);'
-            - '   if (!requestParams) {'
-            - '     return Promise.resolve();'
-            - '   }'
-            - '   return identity.updateIdentityProvider(requestParams).promise();'
-            - '  };'
-            - '  let deleteIdentityProvider = (providerName) => {'
-            - '   let params = {ProviderName: providerName, UserPoolId: userPoolId};'
-            - '   return identity.deleteIdentityProvider(params).promise();'
-            - '  };'
-            - '  let providerPromises = [];'
-            - '  identity.listIdentityProviders({UserPoolId: userPoolId, MaxResults: 60}).promise()'
-            - '  .then((result) => {'
-            - '   let providerList = result.Providers.map(provider => provider.ProviderName);'
-            - '   let providerListInParameters = hostedUIProviderMeta.map(provider => provider.ProviderName);'
-            - '   hostedUIProviderMeta.forEach((providerMetadata) => {'
-            - '    if(providerList.indexOf(providerMetadata.ProviderName) > -1) {'
-            - '     providerPromises.push(updateIdentityProvider(providerMetadata.ProviderName));'
-            - '    } else {'
-            - '     providerPromises.push(createIdentityProvider(providerMetadata.ProviderName));'
-            - '    }'
-            - '  });'
-            - '  providerList.forEach((provider) => {'
-            - '   if(providerListInParameters.indexOf(provider) < 0) {'
-            - '    providerPromises.push(deleteIdentityProvider(provider));'
-            - '   }'
-            - '  });'
-            - '  return Promise.all(providerPromises);'
-            - ' }).then(() => {response.send(event, context, response.SUCCESS, {})}).catch((err) => {'
-            - '   console.log(err.stack); response.send(event, context, response.FAILED, {err})'
-            - ' });'
-            - ' } '
-            - ' } catch(err) { console.log(err.stack); response.send(event, context, response.FAILED, {err});};'
-            - '} '
-
-      Handler: index.handler
-      Runtime: nodejs12.x
-      Timeout: 300
-      Role: !GetAtt
-        - UserPoolClientRole
-        - Arn
-    DependsOn: UserPoolClientRole
-
-  HostedUIProvidersCustomResourcePolicy:
-    Type: 'AWS::IAM::Policy'
-    Properties:
-      PolicyName: !Join ['-',[!Ref UserPool, 'hostedUIProvider']]
-      Roles:
-        - !Ref UserPoolClientRole
-      PolicyDocument:
-        Version: '2012-10-17'
-        Statement:
-          - Effect: Allow
-            Action:
-              - 'cognito-idp:CreateIdentityProvider'
-              - 'cognito-idp:UpdateIdentityProvider'
-              - 'cognito-idp:ListIdentityProviders'
-              - 'cognito-idp:DeleteIdentityProvider'
-            Resource: !GetAtt UserPool.Arn
-    DependsOn: HostedUIProvidersCustomResource
-
-  HostedUIProvidersCustomResourceLogPolicy:
-    Type: 'AWS::IAM::Policy'
-    Properties:
-      PolicyName: !Join ['-',[!Ref UserPool, 'hostedUIProviderLogPolicy']]
-      Roles:
-        - !Ref UserPoolClientRole
-      PolicyDocument:
-        Version: 2012-10-17
-        Statement:
-          - Effect: Allow
-            Action:
-              - 'logs:CreateLogGroup'
-              - 'logs:CreateLogStream'
-              - 'logs:PutLogEvents'
-            Resource: !Sub
-              - arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
-              - { region: !Ref "AWS::Region",  account: !Ref "AWS::AccountId", lambda: !Ref HostedUIProvidersCustomResource}
-    DependsOn: HostedUIProvidersCustomResourcePolicy
-
-  HostedUIProvidersCustomResourceInputs:
-    Type: 'Custom::LambdaCallout'
-    Properties:
-      ServiceToken: !GetAtt HostedUIProvidersCustomResource.Arn
-      userPoolId: !Ref UserPool
-      hostedUIProviderMeta: !Ref hostedUIProviderMeta
-      hostedUIProviderCreds: !Ref hostedUIProviderCreds
-    DependsOn: HostedUIProvidersCustomResourceLogPolicy
-  
-  
-  OAuthCustomResource:
-    Type: 'AWS::Lambda::Function'
-    Properties:
-      Code:
-        ZipFile: !Join
-          - |+
-          - - 'const response = require(''cfn-response'');'
-            - 'const aws = require(''aws-sdk'');'
-            - 'const identity = new aws.CognitoIdentityServiceProvider();'
-            - 'exports.handler = (event, context, callback) => {'
-            - 'try{'
-            - ' const userPoolId = event.ResourceProperties.userPoolId;'
-            - ' let webClientId = event.ResourceProperties.webClientId;'
-            - ' let nativeClientId = event.ResourceProperties.nativeClientId;'
-            - ' let hostedUIProviderMeta = JSON.parse(event.ResourceProperties.hostedUIProviderMeta);'
-            - ' let oAuthMetadata = JSON.parse(event.ResourceProperties.oAuthMetadata);'
-            - ' let providerList = hostedUIProviderMeta.map(provider => provider.ProviderName);'
-            - ' providerList.push(''COGNITO'');'
-            - ' if (event.RequestType == ''Delete'') {'
-            - '  response.send(event, context, response.SUCCESS, {});'
-            - ' }'
-            - ' if (event.RequestType == ''Update'' || event.RequestType == ''Create'') {'
-            - '  let params = {'
-            - '   UserPoolId: userPoolId,'
-            - '   AllowedOAuthFlows: oAuthMetadata.AllowedOAuthFlows,'
-            - '   AllowedOAuthFlowsUserPoolClient: true,'
-            - '   AllowedOAuthScopes: oAuthMetadata.AllowedOAuthScopes,'
-            - '   CallbackURLs: oAuthMetadata.CallbackURLs,'
-            - '   LogoutURLs: oAuthMetadata.LogoutURLs,'
-            - '   SupportedIdentityProviders: providerList'
-            - '  };'
-            - '  let updateUserPoolClientPromises = [];'
-            - '  params.ClientId = webClientId;'
-            - '  updateUserPoolClientPromises.push(identity.updateUserPoolClient(params).promise());'
-            - '  params.ClientId = nativeClientId;'
-            - '  updateUserPoolClientPromises.push(identity.updateUserPoolClient(params).promise());'
-            - '  Promise.all(updateUserPoolClientPromises)'
-            - '  .then(() => {response.send(event, context, response.SUCCESS, {})}).catch((err) => {'
-            - '    console.log(err.stack); response.send(event, context, response.FAILED, {err});'
-            - '  });'
-            - ' }'
-            - '} catch(err) { console.log(err.stack); response.send(event, context, response.FAILED, {err});};'
-            - '}'
-
-      Handler: index.handler
-      Runtime: nodejs12.x
-      Timeout: 300
-      Role: !GetAtt
-        - UserPoolClientRole
-        - Arn
-    DependsOn: HostedUIProvidersCustomResourceInputs
-
-  OAuthCustomResourcePolicy:
-    Type: 'AWS::IAM::Policy'
-    Properties:
-      PolicyName: !Join ['-',[!Ref UserPool, 'OAuth']]
-      Roles:
-        - !Ref UserPoolClientRole
-      PolicyDocument:
-        Version: '2012-10-17'
-        Statement:
-          - Effect: Allow
-            Action:
-              - 'cognito-idp:UpdateUserPoolClient'
-            Resource: !GetAtt UserPool.Arn
-    DependsOn: OAuthCustomResource
-
-  OAuthCustomResourceLogPolicy:
-    Type: 'AWS::IAM::Policy'
-    Properties:
-      PolicyName: !Join ['-',[!Ref UserPool, 'OAuthLogPolicy']]
-      Roles:
-        - !Ref UserPoolClientRole
-      PolicyDocument:
-        Version: 2012-10-17
-        Statement:
-          - Effect: Allow
-            Action:
-              - 'logs:CreateLogGroup'
-              - 'logs:CreateLogStream'
-              - 'logs:PutLogEvents'
-            Resource: !Sub
-              - arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
-              - { region: !Ref "AWS::Region",  account: !Ref "AWS::AccountId", lambda: !Ref OAuthCustomResource}
-    DependsOn: OAuthCustomResourcePolicy
-
-  OAuthCustomResourceInputs:
-    Type: 'Custom::LambdaCallout'
-    Properties:
-      ServiceToken: !GetAtt OAuthCustomResource.Arn
-      userPoolId: !Ref UserPool
-      hostedUIProviderMeta: !Ref hostedUIProviderMeta
-      oAuthMetadata: !Ref oAuthMetadata
-      webClientId: !Ref 'UserPoolClientWeb'
-      nativeClientId: !Ref 'UserPoolClient'
-    DependsOn: OAuthCustomResourceLogPolicy
-  
-
-  
-    
-  # BEGIN IDENTITY POOL RESOURCES
-  
-
-  IdentityPool:
-  # Always created
-    Type: AWS::Cognito::IdentityPool
-    Properties:
-      IdentityPoolName: !If [ShouldNotCreateEnvResources, 'needtofeedae53688e_identitypool_ae53688e', !Join ['',['needtofeedae53688e_identitypool_ae53688e', '__', !Ref env]]]
-      
-      CognitoIdentityProviders:
-        - ClientId:  !Ref UserPoolClient
-          ProviderName: !Sub
-            - cognito-idp.${region}.amazonaws.com/${client}
-            - { region: !Ref "AWS::Region",  client: !Ref UserPool}
-        - ClientId:  !Ref UserPoolClientWeb
-          ProviderName: !Sub
-            - cognito-idp.${region}.amazonaws.com/${client}
-            - { region: !Ref "AWS::Region",  client: !Ref UserPool}
-            
-      AllowUnauthenticatedIdentities: !Ref allowUnauthenticatedIdentities
-      
-    
-    DependsOn: UserPoolClientInputs
-    
-
-  IdentityPoolRoleMap:
-  # Created to map Auth and Unauth roles to the identity pool
-  # Depends on Identity Pool for ID ref
-    Type: AWS::Cognito::IdentityPoolRoleAttachment
-    Properties:
-      IdentityPoolId: !Ref IdentityPool
-      Roles:
-          unauthenticated: !Ref unauthRoleArn
-          authenticated: !Ref authRoleArn
-    DependsOn: IdentityPool
-  
-
-Outputs :
-  
-  IdentityPoolId:
-    Value: !Ref 'IdentityPool'
-    Description:  Id for the identity pool
-  IdentityPoolName:
-    Value: !GetAtt IdentityPool.Name
-  
-  
-  HostedUIDomain:
-    Value: !If [ShouldNotCreateEnvResources, !Ref hostedUIDomainName, !Join ['-',[!Ref hostedUIDomainName, !Ref env]]]
-  
-  
-  OAuthMetadata:
-    Value: !Ref oAuthMetadata
-  
-  
-  UserPoolId:
-    Value: !Ref 'UserPool'
-    Description:  Id for the user pool
-  UserPoolArn:
-    Value: !GetAtt UserPool.Arn
-    Description:  Arn for the user pool
-  UserPoolName:
-    Value: !Ref userPoolName
-  AppClientIDWeb:
-    Value: !Ref 'UserPoolClientWeb'
-    Description: The user pool app client id for web
-  AppClientID:
-    Value: !Ref 'UserPoolClient'
-    Description: The user pool app client id
-  AppClientSecret:
-    Value: !GetAtt UserPoolClientInputs.appSecret
-    Condition: ShouldOutputAppClientSecrets
-  
-  
-  
-  
-  
-  
-  
-  
Index: amplify/backend/tags.json
===================================================================
diff --git a/amplify/backend/tags.json b/amplify/backend/tags.json
deleted file mode 100644
--- a/amplify/backend/tags.json	(revision 60eb7cd8846501fea94ad6a8ba2a6becaa848857)
+++ /dev/null	(revision 60eb7cd8846501fea94ad6a8ba2a6becaa848857)
@@ -1,10 +0,0 @@
-[
-  {
-    "Key": "user:Stack",
-    "Value": "{project-env}"
-  },
-  {
-    "Key": "user:Application",
-    "Value": "{project-name}"
-  }
-]
\ No newline at end of file
Index: amplify/backend/api/restaurants/transform.conf.json
===================================================================
diff --git a/amplify/backend/api/restaurants/transform.conf.json b/amplify/backend/api/restaurants/transform.conf.json
deleted file mode 100644
--- a/amplify/backend/api/restaurants/transform.conf.json	(revision 60eb7cd8846501fea94ad6a8ba2a6becaa848857)
+++ /dev/null	(revision 60eb7cd8846501fea94ad6a8ba2a6becaa848857)
@@ -1,10 +0,0 @@
-{
-    "Version": 5,
-    "ElasticsearchWarning": true,
-    "ResolverConfig": {
-        "project": {
-            "ConflictHandler": "AUTOMERGE",
-            "ConflictDetection": "VERSION"
-        }
-    }
-}
\ No newline at end of file
Index: amplify/backend/storage/s3475e3a0f/s3-cloudformation-template.json
===================================================================
diff --git a/amplify/backend/storage/s3475e3a0f/s3-cloudformation-template.json b/amplify/backend/storage/s3475e3a0f/s3-cloudformation-template.json
deleted file mode 100644
--- a/amplify/backend/storage/s3475e3a0f/s3-cloudformation-template.json	(revision 60eb7cd8846501fea94ad6a8ba2a6becaa848857)
+++ /dev/null	(revision 60eb7cd8846501fea94ad6a8ba2a6becaa848857)
@@ -1,657 +0,0 @@
-{
-	"AWSTemplateFormatVersion": "2010-09-09",
-	"Description": "S3 resource stack creation using Amplify CLI",
-	"Parameters": {
-		"bucketName": {
-			"Type": "String"
-		},
-		"authPolicyName": {
-			"Type": "String"
-		},
-		"unauthPolicyName": {
-			"Type": "String"
-		},
-		"authRoleName": {
-			"Type": "String"
-		},
-		"unauthRoleName": {
-			"Type": "String"
-		},
-		"s3PublicPolicy": {
-			"Type": "String",
-			"Default" : "NONE"
-		},
-		"s3PrivatePolicy": {
-			"Type": "String",
-			"Default" : "NONE"
-		},
-		"s3ProtectedPolicy": {
-			"Type": "String",
-			"Default" : "NONE"
-		},
-		"s3UploadsPolicy": {
-			"Type": "String",
-			"Default" : "NONE"
-		},
-		"s3ReadPolicy": {
-			"Type": "String",
-			"Default" : "NONE"
-		},
-		"s3PermissionsAuthenticatedPublic": {
-			"Type": "String",
-			"Default" : "DISALLOW"
-		},
-		"s3PermissionsAuthenticatedProtected": {
-			"Type": "String",
-			"Default" : "DISALLOW"
-		},
-		"s3PermissionsAuthenticatedPrivate": {
-			"Type": "String",
-			"Default" : "DISALLOW"
-		},
-		"s3PermissionsAuthenticatedUploads": {
-			"Type": "String",
-			"Default" : "DISALLOW"
-		},
-		"s3PermissionsGuestPublic": {
-			"Type": "String",
-			"Default" : "DISALLOW"
-		},
-		"s3PermissionsGuestUploads": {
-			"Type": "String",
-			"Default" : "DISALLOW"		},
-		"AuthenticatedAllowList": {
-			"Type": "String",
-			"Default" : "DISALLOW"
-		},
-		"GuestAllowList": {
-			"Type": "String",
-			"Default" : "DISALLOW"
-		},
-		"selectedGuestPermissions": {
-			"Type": "CommaDelimitedList",
-			"Default" : "NONE"
-		},
-		"selectedAuthenticatedPermissions": {
-			"Type": "CommaDelimitedList",
-			"Default" : "NONE"
-		},
-		"env": {
-			"Type": "String"
-		},
-		"triggerFunction": {
-			"Type": "String"
-		}
-	
-
-	},
-	"Conditions": {
-		"ShouldNotCreateEnvResources": {
-			"Fn::Equals": [
-				{
-					"Ref": "env"
-				},
-				"NONE"
-			]
-		},
-		"CreateAuthPublic": {
-			"Fn::Not" : [{
-				"Fn::Equals" : [
-					 {"Ref" : "s3PermissionsAuthenticatedPublic"},
-					 "DISALLOW"
-				]
-		 }]
-		},
-		"CreateAuthProtected": {
-			"Fn::Not" : [{
-				"Fn::Equals" : [
-					 {"Ref" : "s3PermissionsAuthenticatedProtected"},
-					 "DISALLOW"
-				]
-		 }]
-		},
-		"CreateAuthPrivate": {
-			"Fn::Not" : [{
-				"Fn::Equals" : [
-					 {"Ref" : "s3PermissionsAuthenticatedPrivate"},
-					 "DISALLOW"
-				]
-		 }]
-		},
-		"CreateAuthUploads": {
-			"Fn::Not" : [{
-				"Fn::Equals" : [
-					 {"Ref" : "s3PermissionsAuthenticatedUploads"},
-					 "DISALLOW"
-				]
-		 }]
-		},
-		"CreateGuestPublic": {
-			"Fn::Not" : [{
-				"Fn::Equals" : [
-					 {"Ref" : "s3PermissionsGuestPublic"},
-					 "DISALLOW"
-				]
-		 }]
-		},
-		"CreateGuestUploads": {
-			"Fn::Not" : [{
-				"Fn::Equals" : [
-					 {"Ref" : "s3PermissionsGuestUploads"},
-					 "DISALLOW"
-				]
-		 }]
-		},
-		"AuthReadAndList": {
-			"Fn::Not" : [{
-				"Fn::Equals" : [
-					 {"Ref" : "AuthenticatedAllowList"},
-					 "DISALLOW"
-				]
-		 }]
-		},
-		"GuestReadAndList": {
-			"Fn::Not" : [{
-				"Fn::Equals" : [
-					 {"Ref" : "GuestAllowList"},
-					 "DISALLOW"
-				]
-		 }]
-		}
-	},
-	"Resources": {
-		"S3Bucket": {
-			"Type": "AWS::S3::Bucket",
-		    
-			"DeletionPolicy" : "Retain",
-			"Properties": {
-				"BucketName": {
-                    "Fn::If": [
-                        "ShouldNotCreateEnvResources",
-                        {
-                            "Ref": "bucketName"
-                        },
-                        {
-                            "Fn::Join": [
-                                "",
-                                [
-                                    {
-                                        "Ref": "bucketName"
-                                    },
-                                    {
-                                      "Fn::Select": [
-                                          3,
-                                          {
-                                              "Fn::Split": [
-                                                  "-",
-                                                  {
-                                                      "Ref": "AWS::StackName"
-                                                  }
-                                              ]
-                                          }
-                                      ]
-                                    },
-                                    "-",
-                                    {
-                                        "Ref": "env"
-                                    }
-                                ]
-                            ]
-                        }
-                    ]
-                },
-                
-				"CorsConfiguration": {
-					"CorsRules": [
-						{
-							"AllowedHeaders": [
-								"*"
-							],
-							"AllowedMethods": [
-								"GET",
-								"HEAD",
-								"PUT",
-								"POST",
-								"DELETE"
-							],
-							"AllowedOrigins": [
-								"*"
-							],
-							"ExposedHeaders": [
-								"x-amz-server-side-encryption",
-								"x-amz-request-id",
-								"x-amz-id-2",
-								"ETag"
-							],
-							"Id": "S3CORSRuleId1",
-							"MaxAge": "3000"
-						}
-					]
-				}
-			}
-		},
-      
-	    
-		"S3AuthPublicPolicy": {
-			"DependsOn": [
-				"S3Bucket"
-			],
-			"Condition": "CreateAuthPublic",
-			"Type": "AWS::IAM::Policy",
-			"Properties": {
-				"PolicyName": {
-					"Ref": "s3PublicPolicy"
-				},
-				"Roles": [
-					{
-						"Ref": "authRoleName"
-					}
-				],
-				"PolicyDocument": {
-					"Version": "2012-10-17",
-					"Statement": [
-						{
-							"Effect": "Allow",
-							"Action": {
-								"Fn::Split" : [ "," , {
-									"Ref": "s3PermissionsAuthenticatedPublic"
-								} ]
-							},
-							"Resource": [
-								{
-									"Fn::Join": [
-										"",
-										[
-											"arn:aws:s3:::",
-											{
-												"Ref": "S3Bucket"
-											},
-											"/public/*"
-										]
-									]
-								}
-							]
-						}
-					]
-				}
-			}
-		},
-		"S3AuthProtectedPolicy": {
-			"DependsOn": [
-				"S3Bucket"
-			],
-			"Condition": "CreateAuthProtected",
-			"Type": "AWS::IAM::Policy",
-			"Properties": {
-				"PolicyName": {
-					"Ref": "s3ProtectedPolicy"
-				},
-				"Roles": [
-					{
-						"Ref": "authRoleName"
-					}
-				],
-				"PolicyDocument": {
-					"Version": "2012-10-17",
-					"Statement": [
-						{
-							"Effect": "Allow",
-							"Action": {
-								"Fn::Split" : [ "," , {
-									"Ref": "s3PermissionsAuthenticatedProtected"
-								} ]
-							},
-							"Resource": [
-								{
-									"Fn::Join": [
-										"",
-										[
-											"arn:aws:s3:::",
-											{
-												"Ref": "S3Bucket"
-											},
-											"/protected/${cognito-identity.amazonaws.com:sub}/*"
-										]
-									]
-								}
-							]
-						}
-					]
-				}
-			}
-		},
-		"S3AuthPrivatePolicy": {
-			"DependsOn": [
-				"S3Bucket"
-			],
-			"Condition": "CreateAuthPrivate",
-			"Type": "AWS::IAM::Policy",
-			"Properties": {
-				"PolicyName": {
-					"Ref": "s3PrivatePolicy"
-				},
-				"Roles": [
-					{
-						"Ref": "authRoleName"
-					}
-				],
-				"PolicyDocument": {
-					"Version": "2012-10-17",
-					"Statement": [
-						{
-							"Effect": "Allow",
-							"Action": {
-								"Fn::Split" : [ "," , {
-									"Ref": "s3PermissionsAuthenticatedPrivate"
-								} ]
-							},
-							"Resource": [
-								{
-									"Fn::Join": [
-										"",
-										[
-											"arn:aws:s3:::",
-											{
-												"Ref": "S3Bucket"
-											},
-											"/private/${cognito-identity.amazonaws.com:sub}/*"
-										]
-									]
-								}
-							]
-						}
-					]
-				}
-			}
-		},
-		"S3AuthUploadPolicy": {
-			"DependsOn": [
-				"S3Bucket"
-			],
-			"Condition": "CreateAuthUploads",
-			"Type": "AWS::IAM::Policy",
-			"Properties": {
-				"PolicyName": {
-					"Ref": "s3UploadsPolicy"
-				},
-				"Roles": [
-					{
-						"Ref": "authRoleName"
-					}
-				],
-				"PolicyDocument": {
-					"Version": "2012-10-17",
-					"Statement": [
-						{
-							"Effect": "Allow",
-							"Action": {
-								"Fn::Split" : [ "," , {
-									"Ref": "s3PermissionsAuthenticatedUploads"
-								} ]
-							},
-							"Resource": [
-								{
-									"Fn::Join": [
-										"",
-										[
-											"arn:aws:s3:::",
-											{
-												"Ref": "S3Bucket"
-											},
-											"/uploads/*"
-										]
-									]
-								}
-							]
-						}
-					]
-				}
-			}
-		},
-		"S3AuthReadPolicy": {
-			"DependsOn": [
-				"S3Bucket"
-			],
-			"Condition": "AuthReadAndList",
-			"Type": "AWS::IAM::Policy",
-			"Properties": {
-				"PolicyName": {
-					"Ref": "s3ReadPolicy"
-				},
-				"Roles": [
-					{
-						"Ref": "authRoleName"
-					}
-				],
-				"PolicyDocument": {
-					"Version": "2012-10-17",
-					"Statement": [
-						{
-							"Effect": "Allow",
-							"Action": [
-								"s3:GetObject"
-							],
-							"Resource": [
-								{
-									"Fn::Join": [
-										"",
-										[
-											"arn:aws:s3:::",
-											{
-												"Ref": "S3Bucket"
-											},
-											"/protected/*"
-										]
-									]
-								}
-							]
-						},
-						{
-							"Effect": "Allow",
-							"Action": [
-								"s3:ListBucket"
-							],
-							"Resource": [
-								{
-									"Fn::Join": [
-										"",
-										[
-											"arn:aws:s3:::",
-											{
-												"Ref": "S3Bucket"
-											}
-										]
-									]
-								}
-							],
-							"Condition": {
-								"StringLike": {
-									"s3:prefix": [
-										"public/",
-										"public/*",
-										"protected/",
-										"protected/*",
-										"private/${cognito-identity.amazonaws.com:sub}/",
-										"private/${cognito-identity.amazonaws.com:sub}/*"
-									]
-								}
-							}
-						}
-					]
-				}
-			}
-		},
-		"S3GuestPublicPolicy": {
-			"DependsOn": [
-				"S3Bucket"
-			],
-			"Condition": "CreateGuestPublic",
-			"Type": "AWS::IAM::Policy",
-			"Properties": {
-				"PolicyName": {
-					"Ref": "s3PublicPolicy"
-				},
-				"Roles": [
-					{
-						"Ref": "unauthRoleName"
-					}
-				],
-				"PolicyDocument": {
-					"Version": "2012-10-17",
-					"Statement": [
-						{
-							"Effect": "Allow",
-							"Action": {
-								"Fn::Split" : [ "," , {
-									"Ref": "s3PermissionsGuestPublic"
-								} ]
-							},
-							"Resource": [
-								{
-									"Fn::Join": [
-										"",
-										[
-											"arn:aws:s3:::",
-											{
-												"Ref": "S3Bucket"
-											},
-											"/public/*"
-										]
-									]
-								}
-							]
-						}
-					]
-				}
-			}
-		},
-		"S3GuestUploadPolicy": {
-			"DependsOn": [
-				"S3Bucket"
-			],
-			"Condition": "CreateGuestUploads",
-			"Type": "AWS::IAM::Policy",
-			"Properties": {
-				"PolicyName": {
-					"Ref": "s3UploadsPolicy"
-				},
-				"Roles": [
-					{
-						"Ref": "unauthRoleName"
-					}
-				],
-				"PolicyDocument": {
-					"Version": "2012-10-17",
-					"Statement": [
-						{
-							"Effect": "Allow",
-							"Action": {
-								"Fn::Split" : [ "," , {
-									"Ref": "s3PermissionsGuestUploads"
-								} ]
-							},
-							"Resource": [
-								{
-									"Fn::Join": [
-										"",
-										[
-											"arn:aws:s3:::",
-											{
-												"Ref": "S3Bucket"
-											},
-											"/uploads/*"
-										]
-									]
-								}
-							]
-						}
-					]
-				}
-			}
-		},
-		"S3GuestReadPolicy": {
-			"DependsOn": [
-				"S3Bucket"
-			],
-			"Condition": "GuestReadAndList",
-			"Type": "AWS::IAM::Policy",
-			"Properties": {
-				"PolicyName": {
-					"Ref": "s3ReadPolicy"
-				},
-				"Roles": [
-					{
-						"Ref": "unauthRoleName"
-					}
-				],
-				"PolicyDocument": {
-					"Version": "2012-10-17",
-					"Statement": [
-						{
-							"Effect": "Allow",
-							"Action": [
-								"s3:GetObject"
-							],
-							"Resource": [
-								{
-									"Fn::Join": [
-										"",
-										[
-											"arn:aws:s3:::",
-											{
-												"Ref": "S3Bucket"
-											},
-											"/protected/*"
-										]
-									]
-								}
-							]
-						},
-						{
-							"Effect": "Allow",
-							"Action": [
-								"s3:ListBucket"
-							],
-							"Resource": [
-								{
-									"Fn::Join": [
-										"",
-										[
-											"arn:aws:s3:::",
-											{
-												"Ref": "S3Bucket"
-											}
-										]
-									]
-								}
-							],
-							"Condition": {
-								"StringLike": {
-									"s3:prefix": [
-										"public/",
-										"public/*",
-										"protected/",
-										"protected/*"
-									]
-								}
-							}
-						}
-					]
-				}
-			}
-		}
-	},
-	"Outputs": {
-		"BucketName": {
-			"Value": {
-				"Ref": "S3Bucket"
-			},
-			"Description": "Bucket name for the S3 bucket"
-		},
-		"Region": {
-			"Value": {
-				"Ref": "AWS::Region"
-			}
-		}
-	}
-}
Index: amplify/backend/api/restaurants/parameters.json
===================================================================
diff --git a/amplify/backend/api/restaurants/parameters.json b/amplify/backend/api/restaurants/parameters.json
deleted file mode 100644
--- a/amplify/backend/api/restaurants/parameters.json	(revision 60eb7cd8846501fea94ad6a8ba2a6becaa848857)
+++ /dev/null	(revision 60eb7cd8846501fea94ad6a8ba2a6becaa848857)
@@ -1,11 +0,0 @@
-{
-  "AppSyncApiName": "restaurants",
-  "DynamoDBBillingMode": "PAY_PER_REQUEST",
-  "DynamoDBEnableServerSideEncryption": false,
-  "AuthCognitoUserPoolId": {
-    "Fn::GetAtt": [
-      "authneedtofeedae53688e",
-      "Outputs.UserPoolId"
-    ]
-  }
-}
\ No newline at end of file
Index: amplify/backend/storage/s3475e3a0f/parameters.json
===================================================================
diff --git a/amplify/backend/storage/s3475e3a0f/parameters.json b/amplify/backend/storage/s3475e3a0f/parameters.json
deleted file mode 100644
--- a/amplify/backend/storage/s3475e3a0f/parameters.json	(revision 60eb7cd8846501fea94ad6a8ba2a6becaa848857)
+++ /dev/null	(revision 60eb7cd8846501fea94ad6a8ba2a6becaa848857)
@@ -1,33 +0,0 @@
-{
-  "bucketName": "needtofeed9f63d8bbb2874febb0dff7c39ca5fee8",
-  "authPolicyName": "s3_amplify_475e3a0f",
-  "unauthPolicyName": "s3_amplify_475e3a0f",
-  "authRoleName": {
-    "Ref": "AuthRoleName"
-  },
-  "unauthRoleName": {
-    "Ref": "UnauthRoleName"
-  },
-  "selectedGuestPermissions": [
-    "s3:GetObject",
-    "s3:ListBucket"
-  ],
-  "selectedAuthenticatedPermissions": [
-    "s3:GetObject",
-    "s3:ListBucket"
-  ],
-  "s3PermissionsAuthenticatedPublic": "s3:GetObject",
-  "s3PublicPolicy": "Public_policy_3252136e",
-  "s3PermissionsAuthenticatedUploads": "DISALLOW",
-  "s3UploadsPolicy": "Uploads_policy_3252136e",
-  "s3PermissionsAuthenticatedProtected": "s3:GetObject",
-  "s3ProtectedPolicy": "Protected_policy_3252136e",
-  "s3PermissionsAuthenticatedPrivate": "s3:GetObject",
-  "s3PrivatePolicy": "Private_policy_3252136e",
-  "AuthenticatedAllowList": "ALLOW",
-  "s3ReadPolicy": "read_policy_3252136e",
-  "s3PermissionsGuestPublic": "DISALLOW",
-  "s3PermissionsGuestUploads": "DISALLOW",
-  "GuestAllowList": "DISALLOW",
-  "triggerFunction": "NONE"
-}
\ No newline at end of file
Index: amplify/backend/auth/needtofeedae53688e/parameters.json
===================================================================
diff --git a/amplify/backend/auth/needtofeedae53688e/parameters.json b/amplify/backend/auth/needtofeedae53688e/parameters.json
deleted file mode 100644
--- a/amplify/backend/auth/needtofeedae53688e/parameters.json	(revision 60eb7cd8846501fea94ad6a8ba2a6becaa848857)
+++ /dev/null	(revision 60eb7cd8846501fea94ad6a8ba2a6becaa848857)
@@ -1,72 +0,0 @@
-{
-    "identityPoolName": "needtofeedae53688e_identitypool_ae53688e",
-    "allowUnauthenticatedIdentities": false,
-    "resourceNameTruncated": "needtoae53688e",
-    "userPoolName": "needtofeedae53688e_userpool_ae53688e",
-    "autoVerifiedAttributes": [
-        "email"
-    ],
-    "mfaConfiguration": "OFF",
-    "mfaTypes": [
-        "SMS Text Message"
-    ],
-    "smsAuthenticationMessage": "Your authentication code is {####}",
-    "smsVerificationMessage": "Your verification code is {####}",
-    "emailVerificationSubject": "Your verification code",
-    "emailVerificationMessage": "Your verification code is {####}",
-    "defaultPasswordPolicy": false,
-    "passwordPolicyMinLength": 8,
-    "passwordPolicyCharacters": [],
-    "requiredAttributes": [
-        "email",
-        "name"
-    ],
-    "aliasAttributes": [],
-    "userpoolClientGenerateSecret": false,
-    "userpoolClientRefreshTokenValidity": 30,
-    "userpoolClientWriteAttributes": [
-        "email"
-    ],
-    "userpoolClientReadAttributes": [
-        "email"
-    ],
-    "userpoolClientLambdaRole": "needtoae53688e_userpoolclient_lambda_role",
-    "userpoolClientSetAttributes": false,
-    "sharedId": "ae53688e",
-    "resourceName": "needtofeedae53688e",
-    "authSelections": "identityPoolAndUserPool",
-    "authRoleArn": {
-        "Fn::GetAtt": [
-            "AuthRole",
-            "Arn"
-        ]
-    },
-    "unauthRoleArn": {
-        "Fn::GetAtt": [
-            "UnauthRole",
-            "Arn"
-        ]
-    },
-    "useDefault": "defaultSocial",
-    "hostedUI": true,
-    "usernameAttributes": [
-        "email"
-    ],
-    "triggers": "{}",
-    "hostedUIDomainName": "needtofeedae53688e-ae53688e",
-    "authProvidersUserPool": [
-        "Facebook",
-        "Google"
-    ],
-    "hostedUIProviderMeta": "[{\"ProviderName\":\"Facebook\",\"authorize_scopes\":\"email,public_profile\",\"AttributeMapping\":{\"email\":\"email\",\"name\":\"name\",\"username\":\"id\"}},{\"ProviderName\":\"Google\",\"authorize_scopes\":\"openid email profile\",\"AttributeMapping\":{\"email\":\"email\",\"name\":\"name\",\"username\":\"sub\"}}]",
-    "oAuthMetadata": "{\"AllowedOAuthFlows\":[\"code\"],\"AllowedOAuthScopes\":[\"phone\",\"email\",\"openid\",\"profile\",\"aws.cognito.signin.user.admin\"],\"CallbackURLs\":[\"http://localhost:3000/\"],\"LogoutURLs\":[\"http://localhost:3000/\"]}",
-    "userPoolGroupList": [],
-    "serviceName": "Cognito",
-    "usernameCaseSensitive": false,
-    "parentStack": {
-        "Ref": "AWS::StackId"
-    },
-    "breakCircularDependency": true,
-    "permissions": [],
-    "dependsOn": []
-}
\ No newline at end of file
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
new file mode 100644
--- /dev/null	(date 1636306769213)
+++ b/.idea/compiler.xml	(date 1636306769213)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <bytecodeTargetLevel target="11" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
new file mode 100644
--- /dev/null	(date 1636307237139)
+++ b/.idea/gradle.xml	(date 1636307237139)
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
+  <component name="GradleSettings">
+    <option name="linkedExternalProjectsSettings">
+      <GradleProjectSettings>
+        <option name="testRunner" value="GRADLE" />
+        <option name="distributionType" value="DEFAULT_WRAPPED" />
+        <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="gradleJvm" value="11" />
+        <option name="modules">
+          <set>
+            <option value="$PROJECT_DIR$" />
+            <option value="$PROJECT_DIR$/app" />
+          </set>
+        </option>
+        <option name="resolveModulePerSourceSet" value="false" />
+      </GradleProjectSettings>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1636308678324)
+++ b/.idea/misc.xml	(date 1636308678324)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="11" project-jdk-type="JavaSDK" />
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1636306769218)
+++ b/.idea/vcs.xml	(date 1636306769218)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
